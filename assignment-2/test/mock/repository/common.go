// Code generated by MockGen. DO NOT EDIT.
// Source: repository/common.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v5 "github.com/jackc/pgx/v5"
)

// MockPgxPoolIface is a mock of PgxPoolIface interface.
type MockPgxPoolIface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxPoolIfaceMockRecorder
}

// MockPgxPoolIfaceMockRecorder is the mock recorder for MockPgxPoolIface.
type MockPgxPoolIfaceMockRecorder struct {
	mock *MockPgxPoolIface
}

// NewMockPgxPoolIface creates a new mock instance.
func NewMockPgxPoolIface(ctrl *gomock.Controller) *MockPgxPoolIface {
	mock := &MockPgxPoolIface{ctrl: ctrl}
	mock.recorder = &MockPgxPoolIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxPoolIface) EXPECT() *MockPgxPoolIfaceMockRecorder {
	return m.recorder
}

// QueryRow mocks base method.
func (m *MockPgxPoolIface) QueryRow(ctx context.Context, sql string, args ...interface{}) v5.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(v5.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPgxPoolIfaceMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPgxPoolIface)(nil).QueryRow), varargs...)
}
